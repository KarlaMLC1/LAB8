/*
 * File:   main.c
 * Author: karla
 *
 * Created on 19 de abril de 2023, 05:50 PM
 */

// PIC16F887 Configuration Bit Settings

// 'C' source line config statements

// CONFIG1
#pragma config FOSC = INTRC_NOCLKOUT// Oscillator Selection bits (INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)
#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)
#pragma config LVP = OFF        // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)

// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)

#include <xc.h>
#include <stdio.h>

#define _XTAL_FREQ 1000000

// Declaración de la función "cadena"
void CADENA(char txt[]); 

void setup(void);

void main(void){
    setup();

    char texto[] = " Menú \r\n 1. Leer Potenciometro \r\n 2. Enviar Ascii \r\n"; // Cadena de caracteres a enviar

    while (1){
        // Mostramos el menú en la hiperterminal
        CADENA(texto);

        // Leemos la opción seleccionada por el usuario
        while(!RCIF); // Esperamos a que se reciba un dato
        char opcion = RCREG;

        // Ejecutamos la opción seleccionada por el usuario
        switch(opcion){
            case '1':
                // Leemos el valor del potenciómetro en el puerto A0
                ADCON0bits.CHS = 0b0000; // Seleccionamos el canal A0
                ADCON0bits.ADON = 1; // Habilitamos el conversor A/D
                ADCON0bits.GO_DONE = 1; // Iniciamos la conversión

                while(ADCON0bits.GO_DONE); // Esperamos a que termine la conversión

                // Enviamos el valor del potenciómetro por el puerto serie en formato ASCII
                char valor_pot[5];
                sprintf( valor_pot, "%d\n", ADRESH);
                CADENA(valor_pot);

                // Apagamos el conversor A/D
                ADCON0bits.ADON = 0;
                break;
            
            case '2':
                // Pedimos al usuario que ingrese un valor
                CADENA("Ingrese un valor: ");
                while(!RCIF); // Esperamos a que se reciba un dato
                char valor = RCREG;
                PORTB = RCREG;

                // Enviamos el valor ingresado por el usuario por el puerto B en formato ASCII
                char valor_ascii[2];
                sprintf(valor_ascii, "%c\n", valor);
                CADENA(valor_ascii);
                break;
            
            default:
                // Mostramos un mensaje de error si la opción seleccionada no es válida
                CADENA("Opción no válida\n");
                break;
        }

        __delay_ms(500);
        
    }
}

void CADENA(char txt[]){
    int i = 0;
    while(txt[i] != '\0'){
        while(!TXSTAbits.TRMT);
        TXREG = txt[i]; // Enviamos el caracter actual
        i++;
    }
}
void setup(void){
    
    ANSEL = 0b00000001; // Configuramos el pin A0 como entrada analógica
    ANSELH = 0; 
    
    TRISB = 0b00000000; // Configura RB0-RB7 como salidas
   // ANSELB = 0b00000000; // Configura RB0-RB7 como entradas digitales
    PORTB = 0b00000000; // Configura RB0-RB7 como salidas

    
    OSCCONbits.IRCF = 0b100;
    OSCCONbits.SCS = 1;
//Configuracion de TX y RX
    TXSTAbits.SYNC = 0; // Modo asíncrono
    TXSTAbits.BRGH = 1; // BRG de alta velocidad
    
    BAUDCTLbits.BRG16 = 1; // Se habilita la división del BRG en 16 bits
    
    SPBRG = 25; // Se configura el valor del BRG para una velocidad de 9600 bps
    SPBRGH = 0;
    
    RCSTAbits.SPEN = 1; // Se habilita el puerto serie
    RCSTAbits.RX9 = 0; // No se utiliza bit de paridad
    RCSTAbits.CREN = 1; // Se habilita la recepción continua
    
    TXSTAbits.TXEN = 1; // Se habilita la transmisión
    
    PIR1bits.RCIF = 0; // Se limpia la bandera de interrupción de recepción
    PIE1bits.RCIE = 0; // Se habilitan las interrupciones de recepción
    INTCONbits.PEIE = 1; // Se habilitan las interrupciones de periféricos
    INTCONbits.GIE = 1; // Se habilitan las interrupciones glob
    
    }
